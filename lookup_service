# -*- coding: utf-8 -*-

# The lookup_server runs the lookup method of each module in the lookup
# directory. The script then sleeps for one minute before running each one
# again.

import time
import logging
import os
import sys
import multiprocessing
import signal

import alias.lookup

def init_worker():
    signal.signal(signal.SIGINT, signal.SIG_IGN)


# Configure logging for the lookup service and all the modules.
log_file = os.path.join('log', 'alias.log')
logging.basicConfig(
    level=logging.DEBUG,
    filename=log_file
)

# Suppress verbose logging from the requests module.
requests_log = logging.getLogger("requests.packages.urllib3")
requests_log.setLevel(logging.WARNING)


try:
    while True:
        # Run each lookup as a separate process.
        pool = multiprocessing.Pool(3, init_worker)
        
        #
        # Start a process for each lookup. Once all of the lookups are complete,
        # sleep 60 seconds and restart the lookups.
        #
        logging.info('Start lookups.')
        try:
            pool.apply_async(alias.lookup.gravatar.lookup, [])
            pool.apply_async(alias.lookup.twitter.lookup, [])
            pool.apply_async(alias.lookup.github.lookup, [])

        except KeyboardInterrupt:
            logging.warn('Killing processes...')
            pool.terminate()
            pool.join()
            sys.exit()

        else:
            logging.info('Quitting for now.')
            pool.close()
            pool.join()
        
        logging.info('Sleeping...')
        time.sleep(60)

except Exception as e:
    logging.error(e)
